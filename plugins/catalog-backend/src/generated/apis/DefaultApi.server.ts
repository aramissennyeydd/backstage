/*
 * Copyright 2024 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************

import type {
  AnalyzeLocationRequest,
  AnalyzeLocationResponse,
  CreateLocation201Response,
  CreateLocationRequest,
  EntitiesBatchResponse,
  EntitiesQueryResponse,
  Entity,
  EntityAncestryResponse,
  EntityFacetsResponse,
  GetEntitiesByRefsRequest,
  GetLocations200ResponseInner,
  Location,
  RefreshEntityRequest,
  ValidateEntityRequest,
} from '@backstage/catalog-client';

/**
 * no description
 */

type InputOutput = {
  '/analyze-location': {
    POST: {
      path: {};
      query: {};
      body: AnalyzeLocationRequest;
      response: AnalyzeLocationResponse;
    };
  };

  '/locations': {
    POST: {
      path: {};
      query: {
        dryRun?: string;
      };
      body: CreateLocationRequest;
      response: CreateLocation201Response;
    };
    DELETE: {
      path: {
        id: string;
      };
      query: {};
      response: void;
    };
    GET: {
      path: {};
      query: {};
      response: Array<GetLocations200ResponseInner>;
    };
  };

  '/entities/by-uid/{uid}': {
    DELETE: {
      path: {
        uid: string;
      };
      query: {};
      response: void;
    };
    GET: {
      path: {
        uid: string;
      };
      query: {};
      response: Entity;
    };
  };

  '/entities': {
    GET: {
      path: {};
      query: {
        fields?: Array<string>;
        limit?: number;
        filter?: Array<string>;
        offset?: number;
        after?: string;
        order?: Array<string>;
      };
      response: Array<Entity>;
    };
  };

  '/entities/by-query': {
    GET: {
      path: {};
      query: {
        fields?: Array<string>;
        limit?: number;
        orderField?: Array<string>;
        cursor?: string;
        filter?: Array<string>;
        fullTextFilterTerm?: string;
        fullTextFilterFields?: Array<string>;
      };
      response: EntitiesQueryResponse;
    };
  };

  '/entities/by-refs': {
    POST: {
      path: {};
      query: {};
      body: GetEntitiesByRefsRequest;
      response: EntitiesBatchResponse;
    };
  };

  '/entities/by-name/{kind}/{namespace}/{name}/ancestry': {
    GET: {
      path: {
        kind: string;
        namespace: string;
        name: string;
      };
      query: {};
      response: EntityAncestryResponse;
    };
  };

  '/entities/by-name/{kind}/{namespace}/{name}': {
    GET: {
      path: {
        kind: string;
        namespace: string;
        name: string;
      };
      query: {};
      response: Entity;
    };
  };

  '/entity-facets': {
    GET: {
      path: {};
      query: {
        facet: Array<string>;
        filter?: Array<string>;
      };
      response: EntityFacetsResponse;
    };
  };

  '/locations/{id}': {
    GET: {
      path: {
        id: string;
      };
      query: {};
      response: Location;
    };
  };

  '/locations/by-entity/{kind}/{namespace}/{name}': {
    GET: {
      path: {
        kind: string;
        namespace: string;
        name: string;
      };
      query: {};
      response: Location;
    };
  };

  '/refresh': {
    POST: {
      path: {};
      query: {};
      body: RefreshEntityRequest;
      response: void;
    };
  };

  '/validate-entity': {
    POST: {
      path: {};
      query: {};
      body: ValidateEntityRequest;
      response: void;
    };
  };
};
